#include "TemperatureMonitoringWithQueue.h"

configuration TemperatureMonitoringWithQueueAppC { }
implementation {

  components MainC, TemperatureMonitoringWithQueueC as App;
  
  App.Boot -> MainC;
  
  /* Component which represents a sensor (in our case a temperature sensor) */
  components new DemoSensorC();
  App.Temperature -> DemoSensorC;

  /* Timer which defines instants in which a new threshold value is generated by the sink node */
  components new TimerMilliC() as TimerGenerateNewThreshold;
  App.TimerGenerateNewThreshold -> TimerGenerateNewThreshold;
  
  /* Timer which defines instants in which the non-sink nodes measure the temperature */
  components new TimerMilliC() as TimerMeasureTemperature;
  App.TimerMeasureTemperature -> TimerMeasureTemperature;
  
  /* Node communication components */
  components ActiveMessageC, new AMSenderC(AM_TEMPERATURE_MONITOR), new AMReceiverC(AM_TEMPERATURE_MONITOR);
  App.AMSend -> AMSenderC;
  App.Receive -> AMReceiverC;
  App.Packet -> AMSenderC;
  App.AMPacket -> AMSenderC;
  App.RadioControl -> ActiveMessageC;

  /* Components that store outgoing messages when there's already a message in process */
  components new PoolC(message_t, QUEUE_LENGTH) as UARTMessagePoolP,
    new QueueC(message_t*, QUEUE_LENGTH) as UARTQueueP,
    new QueueC(uint8_t, QUEUE_LENGTH) as packetsLengthQueueP;
  App.UARTMessagePool -> UARTMessagePoolP;
  App.UARTQueue -> UARTQueueP;
  App.packetsLengthQueue -> packetsLengthQueueP;

}
